/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myPackage;

import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Rohit Jagre
 */
public class ImageEncryptionAndDecryption extends javax.swing.JFrame {

    /**
     * Creates new form ImageEncryptionAndDecryption
     */
    String fileName;
    
    public ImageEncryptionAndDecryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePath = new javax.swing.JTextField();
        fileChoose = new javax.swing.JButton();
        fileEncrypt = new javax.swing.JButton();
        fileDecrypt = new javax.swing.JButton();
        result = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileChoose.setText("Choose File");
        fileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooseActionPerformed(evt);
            }
        });

        fileEncrypt.setText("Encrypt");
        fileEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileEncryptActionPerformed(evt);
            }
        });

        fileDecrypt.setText("Decrypt");
        fileDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filePath)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(fileEncrypt)
                        .addGap(27, 27, 27)
                        .addComponent(fileDecrypt)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fileChoose, fileDecrypt, fileEncrypt});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileChoose, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(fileEncrypt)
                    .addComponent(fileDecrypt))
                .addGap(18, 18, 18)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fileChoose, fileDecrypt, fileEncrypt});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooseActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        filePath.setText(f.getAbsolutePath());
        fileName = f.getName();
    }//GEN-LAST:event_fileChooseActionPerformed

    private void fileEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileEncryptActionPerformed
        // TODO add your handling code here:
        try (FileInputStream inputFile = new FileInputStream(filePath.getText())) {
            FileOutputStream outputFile = new FileOutputStream(new File("Encrypted - "+fileName));
            byte k[];
            k = "ass42000".getBytes();
            SecretKeySpec key = new SecretKeySpec(k, "DES");
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(Cipher.ENCRYPT_MODE, key);
//            CipherOutputStream cos = new CipherOutputStream(outputFile, enc);
            CipherInputStream cipherIn = new CipherInputStream(inputFile, cipher);
            byte[] buf = new byte[1024];
            int read;
            while ((read = cipherIn.read(buf)) != -1) {
                outputFile.write(buf, 0, read);
            }
            result.setText(fileName+" is Encrypted");
            outputFile.flush();
            cipherIn.close();
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        JOptionPane.showMessageDialog(rootPane, "The File is Encrypted");
        
    }//GEN-LAST:event_fileEncryptActionPerformed

    private void fileDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileDecryptActionPerformed
        // TODO add your handling code here:
        try {
            FileOutputStream outputFile = new FileOutputStream(new File("Decrypted - "+fileName));
            FileInputStream inputFile = new FileInputStream(filePath.getText());
            byte k[];
            k = "ass42000".getBytes();
            SecretKeySpec key = new SecretKeySpec(k, "DES");
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(Cipher.DECRYPT_MODE, key);
            CipherInputStream cis = new CipherInputStream(inputFile, cipher);
            byte[] buf = new byte[1024];
            int read;
            while ((read = cis.read(buf)) != -1) {
                outputFile.write(buf, 0, read);
            }
            result.setText(fileName + " is Decrypted");
            inputFile.close();
            outputFile.close();
            cis.close();

            JOptionPane.showMessageDialog(null, " The File is Decrypted");

        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException | HeadlessException e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        
    }//GEN-LAST:event_fileDecryptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageEncryptionAndDecryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageEncryptionAndDecryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageEncryptionAndDecryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageEncryptionAndDecryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageEncryptionAndDecryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton fileChoose;
    private static javax.swing.JButton fileDecrypt;
    private static javax.swing.JButton fileEncrypt;
    private static javax.swing.JTextField filePath;
    private static javax.swing.JLabel result;
    // End of variables declaration//GEN-END:variables
}
